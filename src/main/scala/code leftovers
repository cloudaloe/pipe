
	    //var handshakeFuture = sslHandler.handshake()
		//handshakeFuture.sync()
	    
		//pipeline	    


		/*
		override def channelConnected(channelHandlerContext: ChannelHandlerContext, channelStateEvent: ChannelStateEvent){
			println("Channel connected to peer " + channelHandlerContext.getChannel.getRemoteAddress)	  
		}
		*/
		
	    /*
		override def channelActive(channelHandlerContext: ChannelHandlerContext){
			var channelFuture = channelHandlerContext.pipeline.get(classOf[SslHandler]).handshake
		}*/
		
		
		

		/* 
		 * This was fired when a peer disconnected, in Netty 3
		override def channelDisconnected(channelHandlerContext: ChannelHandlerContext, channelStateEvent: ChannelStateEvent){
		  println("Channel disconnected from peer " + channelHandlerContext.getChannel.getRemoteAddress)
		}
		*/


	 		  //request.headers.set(HttpHeaders.Names.HOST, "localhost")
	 		  //request.headers.set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE)
	 		  //request.headers.set(HttpHeaders.Names.ACCEPT_ENCODING, HttpHeaders.Values.GZIP)


	  //channel.flush
	 		  //channel.closeFuture.sync
	 		  //channelFuture.await(7, TimeUnit.SECONDS)
	 		  //println("isDone :", channelFuture.isDone)
	 		  //println("isSuccess :", channelFuture.isSuccess)
	 		  
	 		  
	 		  
	 		  
==============================================================
	 		  
	 		  
Netty 3

/**

/**
 * Setup a server pipeline 
 */
class HttpServerPipelineFactory(ssl: Boolean, sslServer: Boolean = true) extends ChannelPipelineFactory {
	/**
	 * netty pipeline creator
	 */
	override def getPipeline: ChannelPipeline = {	
	  val pipeline = Channels.pipeline()
	  if (ssl) {
	    val sslHandler = new SslHandler(new sslSetup(sslServer).getSslEngine)
	    println(sslHandler.isIssueHandshake)
	    // The following (setCloseOnSSLException) is necessary due to the odd backwards compatible default behavior of netty 3.5,
	    // as without it println(sslHandler.getCloseOnSSLException) still shows that this defaults to false.
	    //sslHandler.setCloseOnSSLException(true);   
	    pipeline.addLast("ssl", sslHandler);
	  }
  
	  pipeline.addLast("decoder", new HttpObjectDecoder())
	  
	  // Uncomment the following line to aggregate http chunks
	  //pipeline.addLast("aggregator", new HttpChunkAggregator(1048576));
	  pipeline.addLast("encoder", new HttpObjectEncoder())
	  
	  // Remove the following line to compress content
	  //pipeline.addLast("deflater", new HttpContentCompressor())
	  
	  pipeline.addLast("handler", new HttpRequestHandler())
	  
	  pipeline
	}
}



/**
 * Setup a client pipeline 
 */
class HttpClientPipelineFactory(ssl: Boolean) extends ChannelPipelineFactory {
	/**
	 * netty pipeline creator
	 */
	override def getPipeline: ChannelPipeline = {	
	  val pipeline = Channels.pipeline()
	  if (ssl) {
	    val sslHandler = new SslHandler(new sslSetup(sslServer=false).getSslEngine)
	    // The following (setCloseOnSSLException) is necessary due to the odd backwards compatible default behavior of netty 3.5,
	    // as without it println(sslHandler.getCloseOnSSLException) still shows that this defaults to false.
	    sslHandler.setCloseOnSSLException(true);   
	    pipeline.addLast("ssl", sslHandler);
	  }
  
	  pipeline.addLast("codec", new HttpClientCodec);
	  
	  // Uncomment the following line for automatic content decompression.
	  //pipeline.addLast("inflater", new HttpContentDecompressor());
	  
	  // Uncomment the following line to aggregate http chunks
	  //pipeline.addLast("aggregator", new HttpChunkAggregator(1048576));
	  
	  //pipeline.addLast("decoder", new HttpRequestDecoder())
	  
	  pipeline.addLast("handler", new HttpResponseHandler)	  
  
	  pipeline
	}
}

class HttpResponseHandler extends SimpleChannelUpstreamHandler {
	override def messageReceived(channelHandlerContext: ChannelHandlerContext, messageEvent: MessageEvent){
	  println("Http response received")
	}
}
*/